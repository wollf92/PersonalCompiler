SPL			= VarDecl* FunDecl*
VarDecl 	= VarDeclType 'id' '=' Expr ';'
VarDeclType = 'var' | Type
FunDecl 	= id '(' [id (',' id)*] ')' '::' Type* '->' RetType Body
InputTypes	= Type*
RetType	= ‘Void’ | Type
Type 		= 'Int'
			| 'Bool'
			| 'Char'
			| ListType
			| TupleType
			|  id
ListType	= '[' Type ']'
TupleType	= '(' Type ',' Type ')'
Body		= ‘{‘ VarDecl* Stmt* [ReturnStmt] ‘}’
Stmt		= IfStmt
			|  WhileStmt
			|  AssignStmt
			|  FunCallStmt
IfStmt		= ‘if’ ‘(‘ Expr ‘)’ Body [ ‘else’ Body] 
WhileStmt	= ‘while’ ‘(‘ Expr ‘)’ Body
AssignStmt	= IdAccess ‘=’ Expr ‘;’
FunCallStmt	= Funcall ‘;’
ReturnStmt	= ‘return’ [Expr] ‘;’
FunCall		= id ‘(‘ ActArgs ‘)’
ActArgs		= [Expr (‘,’ Expr)*]
Expr 		= Expr1 [':' Expr]
Expr1		= Expr2 ('||' Expr2)*
Expr2		= Expr3 ('&&' Expr3)*
Expr3		= Expr4 (('!='|'==') Expr4)*
Expr4 		= Expr5 (('<='|'<'|'>'| '>=') Expr5)*
Expr5		= Expr6 (('+'|'-') Expr6)*
Expr6		= Expr7 (('*'|'%'|'/') Expr7)*
Expr7		= ('!'|'-' Expr7) | Expr8
Expr8		= BaseExpr ('.'(tl|hd|snd|fst))*
BaseExpr	= ValueExpr
			| '(' Expr ')'
			| '(' Expr ',' Expr ')'
			| Funcall
			| Id
ValueExpr	= int
			| char
			| bool
			| '[]' 